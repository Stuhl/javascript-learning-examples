//Yuriah
function HolidayPriorityQueue(){//Techinically its just a function, but it will become an Object. We give it an array gifts[]
  this.gifts = [];//Creates an array inside the Object
  //this reffers to the instance of the object
  //var obj1 = new HolidayPriorityQueue(); //same constructor, but its a differente instance. If I edit obj1, it wont affect obj2, or the HolidayPriorityQueue() constructor
  //var obj2 = new HolidayPriorityQueue();
}

//Adds the addGift method to our Object HolidayPriorityQueue() with 1 parameter (gift);
HolidayPriorityQueue.prototype.addGift = function(gift){
    var priority = gift.priority;
    var giftArrayLength = this.gifts.length;//Again, this reffers to the current instance of the object. So its own length from our gifts[] array
    this.gifts.push(gift);
    this.gifts.sort(function(a, b) {//Thanks Stuhl
      return a.priority - b.priority;
    })
  return this.gifts.length;
}

HolidayPriorityQueue.prototype.buyGift = function(){
  if (this.gifts.length == 0) {
    return '';
  }
  
  let giftName = this.gifts.shift();
  return giftName.gift;
}

//OTHER VARIATIONS
let arrObj = [];

function addGift(obj) {
  arrObj.push(obj);
   arrObj.sort(function(a, b) {
    return a.priority - b.priority;
  })
  return arrObj.length;
}

function buyGift() {
  let giftName = arrObj[0].gift;
  arrObj.shift();
  return giftName;
}


console.log(addGift({gift: "toy", priority: 5}));
console.log(addGift({gift: "1080 ti", priority: 1}));


console.log(buyGift());
console.log(arrObj);
